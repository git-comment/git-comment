.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GIT-COMMENT-LOG 1"
.TH GIT-COMMENT-LOG 1 "2015-07-16" "1.0.0.0" "Git Comment Manual"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\&    git\-comment\-log \- List git commit comments
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    git comment\-log [\-\-pretty <format>] [<revision range>]
\&    git comment\-log \-\-help
\&    git comment\-log \-\-version
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
git-comment-log lists comments attached to a range of commits, optionally with context.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-\-help" 4
.IX Item "--help"
Print a usage message
.IP "\-\-version" 4
.IX Item "--version"
Print the current version number
.IP "\-\-pretty <format>" 4
.IX Item "--pretty <format>"
Pretty-print comments in a format specified by \s-1PRETTY FORMATS\s0
.IP "<revision range>" 4
.IX Item "<revision range>"
Show comments only from commits in the specified revision range. When
not specified, it defaults to \s-1HEAD.\s0
.SH "PRETTY FORMATS"
.IX Header "PRETTY FORMATS"
There are a few built-in formats for specifying how a commit can be displayed, or alternately you can define your own using the built-in placeholders. The default format is 'short'. The predefined formats are:
.IP "\fIshort\fR" 4
.IX Item "short"
.Vb 3
\&  <commit sha1> <comment sha1>
\&  <author>
\&  <title line>
.Ve
.IP "\fIfull\fR" 4
.IX Item "full"
.Vb 3
\&  commit <commit sha1>
\&  comment <comment sha1>
\&  Author: <author>
\&
\&  <content>
.Ve
.IP "\fIraw\fR" 4
.IX Item "raw"
.Vb 7
\&  comment <sha1>
\&  commit <sha1>
\&  file <file:line>
\&  author <person>
\&  created <date>
\&  amender <person>
\&  amended <date>
\&
\&  <content>
.Ve
.IP "\fIformat:string\fR" 4
.IX Item "format:string"
Print using the provided custom placeholders:
.RS 4
.ie n .IP "%n:  new line" 4
.el .IP "\f(CW%n:\fR  new line" 4
.IX Item "%n: new line"
.PD 0
.ie n .IP "%d:  divider line" 4
.el .IP "\f(CW%d:\fR  divider line" 4
.IX Item "%d: divider line"
.ie n .IP "%C:  comment hash" 4
.el .IP "\f(CW%C:\fR  comment hash" 4
.IX Item "%C: comment hash"
.ie n .IP "%c:  short comment hash" 4
.el .IP "\f(CW%c:\fR  short comment hash" 4
.IX Item "%c: short comment hash"
.ie n .IP "%H:  commit hash" 4
.el .IP "\f(CW%H:\fR  commit hash" 4
.IX Item "%H: commit hash"
.ie n .IP "%h:  short commit hash" 4
.el .IP "\f(CW%h:\fR  short commit hash" 4
.IX Item "%h: short commit hash"
.ie n .IP "%f:  file path" 4
.el .IP "\f(CW%f:\fR  file path" 4
.IX Item "%f: file path"
.ie n .IP "%L:  line number" 4
.el .IP "\f(CW%L:\fR  line number" 4
.IX Item "%L: line number"
.ie n .IP "%an: author name" 4
.el .IP "\f(CW%an:\fR author name" 4
.IX Item "%an: author name"
.ie n .IP "%ae: author email" 4
.el .IP "\f(CW%ae:\fR author email" 4
.IX Item "%ae: author email"
.ie n .IP "%ad: author date, \s-1RFC3339\s0 format" 4
.el .IP "\f(CW%ad:\fR author date, \s-1RFC3339\s0 format" 4
.IX Item "%ad: author date, RFC3339 format"
.ie n .IP "%aD: author date, Unix timestamp" 4
.el .IP "\f(CW%aD:\fR author date, Unix timestamp" 4
.IX Item "%aD: author date, Unix timestamp"
.ie n .IP "%cn: committer name" 4
.el .IP "\f(CW%cn:\fR committer name" 4
.IX Item "%cn: committer name"
.ie n .IP "%ce: committer email" 4
.el .IP "\f(CW%ce:\fR committer email" 4
.IX Item "%ce: committer email"
.ie n .IP "%cd: committer date, \s-1RFC3339\s0 format" 4
.el .IP "\f(CW%cd:\fR committer date, \s-1RFC3339\s0 format" 4
.IX Item "%cd: committer date, RFC3339 format"
.ie n .IP "%cD: committer date, Unix timestamp" 4
.el .IP "\f(CW%cD:\fR committer date, Unix timestamp" 4
.IX Item "%cD: committer date, Unix timestamp"
.ie n .IP "%b:  body content" 4
.el .IP "\f(CW%b:\fR  body content" 4
.IX Item "%b: body content"
.ie n .IP "%t:  title line" 4
.el .IP "\f(CW%t:\fR  title line" 4
.IX Item "%t: title line"
.IP "color(...): changes color of enclosed text, where color is black, red, green, yellow, blue, magenta, cyan or white" 4
.IX Item "color(...): changes color of enclosed text, where color is black, red, green, yellow, blue, magenta, cyan or white"
.RE
.RS 4
.RE
.PD
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.IP "\fIcomment.log\-before\fR" 4
.IX Item "comment.log-before"
Number of lines of an attached diff to display before a comment
.IP "\fIcomment.log\-after\fR" 4
.IX Item "comment.log-after"
Number of lines of an attached diff to display after a comment
.SH "AUTHOR"
.IX Header "AUTHOR"
git-comment-log was written and is maintained by Delisa Mason
<delisam@acm.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIgit-comment\fR(1), \fIgit-comment-grep\fR(1)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2015 Delisa Mason <delisam@acm.org>
All rights reserved.
